generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Beer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  company     Brewery  @relation(fields: [companyId], references: [id])
  companyId   String   @db.ObjectId
  name        String
  style       String
  abv         Float? // Assuming you want a floating point number
  ibu         Float? // Assuming you want a floating point number
  category    String[] // Prisma supports array of scalar types
  malt        String[]
  hops        String[]
  flavorNotes String?
  aroma       String?
  nameSake    String?
  notes       String?

  @@index([companyId], name: "companyId") // Name of the index is arbitrary
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  email     String
  breweries String[]  @db.ObjectId // List of brewery IDs where the user is a member
  Brewery   Brewery[]
  Invite    Invite[]
}

model Brewery {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  admins      String[] @db.ObjectId // List of user IDs who are admins
  staff       String[] @db.ObjectId // List of user IDs who are staff
  categories  String[]
  Beer        Beer[]
  Invite      Invite[]

  @@index([ownerId], name: "ownerId")
}

model Invite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  brewery   Brewery  @relation(fields: [breweryId], references: [id])
  breweryId String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  createdAt DateTime @default(now())

  @@index([breweryId, senderId], name: "inviteIds")
}
